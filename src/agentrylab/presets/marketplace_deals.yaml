# Simple Facebook Marketplace Deals Finder
# Uses existing agentrylab patterns - no overengineering!

version: "1.0.0"
id: marketplace_deals
name: "Facebook Marketplace Deals Finder"
description: "Scheduled monitoring of Facebook Marketplace for specific deals"

# Task configuration - SINGLE SOURCE OF TRUTH
tasks:
  - id: deals_monitor
    name: "Deals Monitor"
    description: "Monitors Facebook Marketplace for deals"
    schedule:
      type: "cron"              # or "interval"
      value: "0 9 * * *"        # daily at 09:00 (local timezone)
      timezone: "Asia/Jerusalem"
      duration: "3d"            # run for 3 days
    params:
      location: "Ra'anana, Israel"
      query: ${SEARCH_QUERY:"Bambu Lab X1 Carbon best value deals"}
      top_n: 3                 # Number of final results to return (best deals)
      # Price filtering (generic)
      min_price: 1000
      max_price: 15000
      currency: "ILS"           # Target currency for price filtering
      # Search parameters
      max_results: 10          # Max raw listings to fetch from Facebook
    agents: ["deals_finder"]

# Runtime Configuration
runtime:
  task_manager:
    enabled: true
    persistence: true
    max_concurrent_tasks: 10
    background_runner: "threading"
  scheduler:
    impl: agentrylab.runtime.scheduler.round_robin.RoundRobinScheduler
    params:
      order: [deals_finder]
  max_rounds: 1  # Single execution per scheduled run

# Providers
providers:
  - id: openai_gpt4o_mini
    impl: agentrylab.runtime.providers.openai.OpenAIProvider
    model: "gpt-4o-mini"
    api_key: ${OPENAI_API_KEY}

# Tools - following existing agentrylab pattern
tools:
  - id: apify_marketplace_source
    impl: agentrylab.runtime.tasks.sources.ApifyActorSource
    params:
      apify_token: ${APIFY_API_TOKEN}
      actor_id: "apify/facebook-marketplace-scraper"
      timeout_s: 300
      retries: 3
      backoff: 2.0
    budget:
      per_run_max: 10
      per_iteration_max: 1

# Agents - following existing agentrylab pattern  
agents:
  - id: deals_finder
    role: agent
    display_name: "Deals Finder"
    description: "Finds and analyzes Facebook Marketplace deals"
    provider: openai_gpt4o_mini
    tools: [apify_marketplace_source]  # Use the tool directly!
    context:
      max_messages: 3
      pin_objective: true
    system_prompt: |
      You are a deals finder for Facebook Marketplace. You have access to the apify_marketplace_source tool.
      
      DEFAULT SEARCH PARAMETERS:
      - search_query: "Bambu Lab X1 Carbon best value deals"
      - location: "Ra'anana, Israel"
      - max_results: 10
      
      Your job is to:
      1. IMMEDIATELY output a JSON tool call in this exact format:
         ```json
         {"tool": "apify_marketplace_source", "args": {"search_query": "Bambu Lab X1 Carbon best value deals", "location": "Ra'anana, Israel"}}
         ```
      2. Wait for the tool to return real data
      3. Process the actual tool results - extract key fields from each item:
         - marketplace_listing_title (title)
         - listing_price.formatted_amount (price)
         - location.reverse_geocode.city (location)
         - listingUrl (URL for the listing)
         - marketplace_listing_seller.name (seller name)
      4. Analyze each deal for value and quality
      5. Rank deals by best value (price vs quality)
      6. Return the top deals with explanations and ACTUAL URLs from the tool results
      
      CRITICAL: You MUST output JSON tool calls in the format above. DO NOT generate fake data.
      
      Tool usage:
      - Call apify_marketplace_source with search_query and location parameters
      - Use default values unless user specifies otherwise
      
      Focus on:
      - Price competitiveness
      - Item condition
      - Location convenience
      - Seller reputation indicators
      
      IMPORTANT: Always include the actual listing URL for each deal so users can visit the listing.
      Extract the 'listingUrl' field from each item in the tool results and include it as a clickable link.
      Format: **Listing URL:** [View Listing](actual_url_from_listingUrl_field)
      
      Always provide reasoning for your rankings.
      Return results in a clear, structured format with clickable links.

# Persistence Configuration
persistence:
  checkpoints: [sqlite]
  transcript: [jsonl]

persistence_tools:
  sqlite:
    impl: LangGraphSqliteSaver
    params:
      db_path: "outputs/checkpoints.db"
  jsonl:
    impl: LangGraphJsonlSaver
    params:
      path: "outputs/transcripts"
